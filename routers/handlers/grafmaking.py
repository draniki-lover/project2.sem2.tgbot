from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from keyboards import inlines
from states.state import Form
from services.wolf_serv import get_wolfram_plot
from middlewares.func_valid import FunctionValidatorMiddleware
from filters.graph_filt import EmptyFunctionCheckMiddleware
from filters.graph_limit import GraphRateLimiter


router = Router()
router.message.middleware(GraphRateLimiter())
router.message.middleware(FunctionValidatorMiddleware())
router.message.middleware(EmptyFunctionCheckMiddleware())

STANDARD_FUNCTIONS = {
    "y = x": "y = x",
    "y = x¬≤": "y = x^2",
    "y = ‚àöx": "y = sqrt(x)",
    "y = |x|": "y = |x|",
    "y = sin(x)": "y = sin(x)",
    "y = cos(x)": "y = cos(x)",
    "y = e^x": "y = exp(x)",
    "y = ln(x)": "y = log(x)"
}

async def show_previous_step(message: types.Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state == Form.waiting_standard_choice:
        await state.set_state(Form.waiting_graph_type)
        await message.answer(
            "–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –∑–∞–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:",
            reply_markup=inlines.graph_type_choice()
        )
    elif current_state == Form.waiting_graph_type:
        await state.set_state(Form.waiting_communication_style)
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –Ω–∞—á–∞–ª—É\n–ù–∞–∂–º–∏ /help - —Ç–∞–º —Ç—ã –≤–µ—Ä–æ—è—Ç–Ω–æ —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏, —á—Ç–æ —Ç–µ–±–µ –Ω–∞–¥–æüôå",
            reply_markup=inlines.start_kb(),
        )

@router.callback_query(lambda c: c.data in ["start"])
async def process_communication_style(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Form.waiting_graph_type)
    await callback.message.answer(
        "–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –∫–∞–∫ —Ö–æ—á–µ—à—å –∑–∞–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫",
        reply_markup=inlines.graph_type_choice()
    )

@router.message(Form.waiting_graph_type)
async def process_graph_type(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await show_previous_step(message, state)
    elif message.text == "–ó–∞–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é":
        await state.set_state(Form.waiting_function_input)
        await message.answer(
            "–í–≤–µ–¥–∏ —Ñ—É–Ω–∫—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ y = x^2 + 3x - 5\n"
            "‚Ä¢ f(x) = sin(x) * cos(x)\n"
            "‚Ä¢ sqrt(x) + 1",
            reply_markup=types.ReplyKeyboardRemove()
        )
    elif message.text == "–í—ã–±—Ä–∞—Ç—å –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏":
        await state.set_state(Form.waiting_standard_choice)
        await message.answer(
            "–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –≥—Ä–∞—Ñ–∏–∫ –∫–∞–∫–æ–π –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å",
            reply_markup=inlines.standard_functions_keyboard()
        )

async def send_wolfram_plot(message: types.Message, function: str):
    status_msg = await message.answer("–°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫...")

    wolfram_query = f"plot {function}" if not function.lower().startswith(('plot', 'graph')) else function

    try:
        image_data = await get_wolfram_plot(wolfram_query)

        if image_data:
            await message.answer_photo(
                types.BufferedInputFile(
                    file=image_data.getvalue(),
                    filename="graph.png"
                ),
                caption=f"–ì—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏: {function}"
            )
        else:
            alt_query = f"graph of {function}"
            image_data = await get_wolfram_plot(alt_query)

            if image_data:
                await message.answer_photo(
                    types.BufferedInputFile(
                        file=image_data.getvalue(),
                        filename="graph.png"
                    ),
                    caption=f"–ì—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏: {function}"
                )
            else:
                await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è: {function}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç")

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")

    finally:
        await status_msg.delete()

@router.message(Form.waiting_function_input)
async def process_function_input(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await state.set_state(Form.waiting_graph_type)
        await message.answer(
            "–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –∑–∞–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:",
            reply_markup=inlines.graph_type_choice()
        )
        return

    user_input = message.text.strip()
    await send_wolfram_plot(message, user_input)

    await message.answer(
        "–ì—Ä–∞—Ñ–∏–∫ –ø–æ—Å—Ç—Ä–æ–µ–Ω. –í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥':",
        reply_markup=inlines.back_keyboard()
    )

@router.message(Form.waiting_standard_choice)
async def process_standard_choice(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫")
        return

    if message.text == "–ù–∞–∑–∞–¥":
        await show_previous_step(message, state)
    elif message.text in STANDARD_FUNCTIONS:
        function = STANDARD_FUNCTIONS[message.text]
        await send_wolfram_plot(message, function)
        await show_previous_step(message, state)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫")
